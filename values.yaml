replicaCount: 1

image:
  codexScanner: 471112898140.dkr.ecr.us-east-1.amazonaws.com/codex
  codexBackend: 471112898140.dkr.ecr.us-east-1.amazonaws.com/codex-backend
  codexFrontend: 471112898140.dkr.ecr.us-east-1.amazonaws.com/codex-frontend
  redis: redis
  mongo: mongo
  pullPolicy: Always
  tag: ""

imagePullSecrets:
  - name: regcred

rbac:
  create: true

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: temp-codex-sa


service:
  frontend:
    type: ClusterIP
    port: 3000
  backend:
    type: ClusterIP
    port: 4000
  redis:
    type: ClusterIP
    port: 6379
  mongo:
    type: ClusterIP
    port: 27017



ingress:
  enabled: true
  ingressClassName: nginx
  activateTLS: false
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: codex.securable.ai
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: codex-frontend
              port:
                number: 3000
    - host: codex-api.securable.ai
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: codex-backend
              port:
                number: 4000
  tls:
    - hosts:
        - codex.securable.ai
      secretName: tls-secret


livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
